import java.util.*;

public class Neuron {

	// constant Bias edge weight 
	final double bias = -1;
	Edge bias_edge;
	
	// All Inputs to the neuron 
	ArrayList<Edge> input_edges = new ArrayList<Edge>();
	HashMap<Integer,Edge> edge_lookup = new HashMap<Integer, Edge>();
	
	static int id_count = 0;
	final public int id;
	
	double output; 
	
	public Neuron (double output){
		this.output = output;
		this.id = id_count;
		id_count++;
	}
	/*
	 *   
	 * */
	public void calculate_output(){
		double sum = 0;
		for (Edge e : input_edges) {
			Neuron in = e.get_N_IN();
			double weight = e.get_weight();
			double prev_output = in.output;
			//BEEF
			sum = sum + (weight * prev_output);
		}
		sum = sum + (bias_edge.get_weight() * bias);
		this.output = sigmoid(sum);
	}
	
	/*
	 * Add edges from previous layer of neurons to this Neuron 
	 * */
	public void construct_in_edges (ArrayList<Neuron> in_layer) {
		for (Neuron n : in_layer) {
			Edge e = new Edge(n, this, 0); // Weight Initialization here. MAY NEED TO CHANGE. POSSIBLE ERROR
			input_edges.add(e);
			edge_lookup.put(n.id, e);
		}
	}
	
	
	
	private double sigmoid (double sum) {
		return 1.0 / (1.0 + (Math.exp(-sum)));
	}
	
	
	
}
